---
title: "Hands-on_Exercise 4A"
subtitle: "Visualising Distribution"
description: ""
author: patriciatrisno
date: "May 8, 2025"
date-modified: "last-modified"

editor: visual
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
  code-fold: true
---

## 1 Learning Outcome

Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are [histogram , probability density curve (pdf), boxplot, notch plot and violin plot]{style="color:#8a2be2; font-weight:bold"} and how they can be created by using ggplot2.

In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely [**ridgeline plot** and **raincloud plot**]{style="color:#8a2be2; font-weight:bold"} by using ggplot2 and its extensions.

## 2 Getting Started

### 2.1 Installing and loading the packages

::: panel-tabset
### R packages {.tabset}

Below are the R packages that will be used in this exercise:

-   ggridges, a ggplot2 extension specially designed for plotting ridgeline plots,
-   ggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,
-   tidyverse, a family of R packages to meet the modern data science and visual communication needs,
-   ggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and
-   colorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.

### The Code {.tabset}

```{r}
pacman::p_load(ggdist, ggridges, ggthemes, colorspace, tidyverse)
```
:::

### 2.2 Data import

In this exercise we will use *Exam_data.csv*

Check this code, to import and read the csv file to R using read_csv() from readr, and saved it into a tibble data frame

```{r}
#| code-fold: true

exam <- read_csv("~/Documents/SMU/April Term 2/Visual Analytics/patriciatrisno/ISSS608-VAA/Hands-on_Ex/Hands-on_Ex04/data/Exam_data.csv")
```

## 3 Visualising Distribution with Ridgeline Plot

[*Ridgeline plot*](https://www.data-to-viz.com/graph/ridgeline.html) (sometimes called *Joyplot*) is a data visualization technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using [**histogram**]{style="color:#8a2be2; font-weight:bold"} or [**density plots**]{style="color:#8a2be2; font-weight:bold"}, all aligned to the *same horizontal scale* and presented with a *slight overlap*.

Figure below is a ridgelines plot showing the distribution of English score by class - *Density plots*

::: panel-tabset
### The Plot {.tabset}

```{r}
#| echo: false

ggplot(exam, 
       aes(x = ENGLISH, 
           y = CLASS,
           fill = CLASS)) + 
  geom_density_ridges(rel_min_height = 0.02,   
                      alpha = 0.7,           # transparancy
                      color = "darkgrey",    # outline color
                      size = 0.5,           # outline thickness
                      show.legend = FALSE
                      ) +
  theme_ridges() +
  ggtitle("Distribution of English Score by Class") +
  labs(x = "English Scores", y = "Class") +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold", margin = margin(b = 25)),
    axis.title.x = element_text(size = 12, face = "bold", hjust = 0.45, margin = margin(t = 10)),
    axis.title.y = element_text(size = 12, face = "bold", hjust = 0.5, vjust = 0.5, margin = margin(r = 12)
    ))
```

### The Code

```{r}
#| eval: false

ggplot(exam, 
       aes(x = ENGLISH, 
           y = CLASS,
           fill = CLASS)) + 
  geom_density_ridges(rel_min_height = 0.02,   
                      alpha = 0.7,           # transparancy
                      color = "darkgrey",    # outline color
                      size = 0.5,           # outline thickness
                      show.legend = FALSE
                      ) +
  theme_ridges() +
  ggtitle("Distribution of English Score by Class") +
  labs(x = "English Scores", y = "Class") +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold", margin = margin(b = 25)),
    axis.title.x = element_text(size = 12, face = "bold", hjust = 0.45, margin = margin(t = 10)),
    axis.title.y = element_text(size = 12, face = "bold", hjust = 0.5, vjust = 0.5, margin = margin(r = 12)
    ))
```
:::

::: callout-note
## What for?

-   Ridgeline plots make sense when the **number of group to represent is medium to high**, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.

-   It works well **when there is a clear pattern in the result**, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.
:::

### 3.1 Plotting ridgeline graph: ggridges method

There are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using [ggridges](https://wilkelab.org/ggridges/index.html) package.

ggridges package provides two main geom to plot gridgeline plots, they are: [`geom_ridgeline()`](https://wilkelab.org/ggridges/reference/geom_ridgeline.html) and [`geom_density_ridges()`](https://wilkelab.org/ggridges/reference/geom_density_ridges.html). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.

The ridgeline plot below is plotted by using `geom_density_ridges()`.

::: panel-tabset
### The Plot

```{r}
#| echo: false
library(colorspace)

ggplot(exam, 
       aes(x = ENGLISH, 
           y = CLASS)) +
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = lighten("#7097BB", .3),
    color = "white"
  ) +
  scale_x_continuous(
    name = "English Score",
    expand = c(0, 0)
  ) +
  scale_y_discrete(
    name = "Class",
    expand = expansion(add = c(0.2, 2.6))
  ) +
  ggtitle("Distribution of English Score by Class") +
  theme_ridges() +  # apply base theme first
  theme(
    plot.title = element_text(
      hjust = 0.5, size = 14, face = "bold", margin = margin(b = 25)
    ),
    axis.title.x = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(t = 10)
    ),
    axis.title.y = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(r = 10)
    )
  )

```

### The Code

```{r}
#| eval: false

library(colorspace)

ggplot(exam, 
       aes(x = ENGLISH, 
           y = CLASS)) +
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = lighten("#7097BB", .3),
    color = "white"
  ) +
  scale_x_continuous(
    name = "English Scores",
    expand = c(0, 0)
  ) +
  scale_y_discrete(
    name = "Class",
    expand = expansion(add = c(0.2, 2.6))
  ) +
  ggtitle("Distribution of English Score by Class") +
  theme_ridges() +  
  theme(
    plot.title = element_text(
      hjust = 0.5, size = 14, face = "bold", margin = margin(b = 25)
    ),
    axis.title.x = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(t = 10)
    ),
    axis.title.y = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(r = 10)
    )
  )

```
:::

::: callout-note
### Check this!

To find how to present this plot in histogram, check part 5!
:::

### 3.2 Varying fill colors along the x axis

Sometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either [`geom_ridgeline_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html) or [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html).

Both geoms work just like `geom_ridgeline()` and `geom_density_ridges()`, except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.

::: panel-tabset
## The Plot

```{r}
#| echo: false
ggplot(exam, 
       aes(x = ENGLISH, 
           y = CLASS,
           fill = stat(x))) +
  geom_density_ridges_gradient(
    scale = 3,
    rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Temp. [F]",
                       option = "C") +
  scale_x_continuous(
    name = "English Scores",
    expand = c(0, 0)) +
  scale_y_discrete(name = "Class", expand = expansion(add = c(0.2, 2.6))) +
  ggtitle("Distribution of English Score by Class") +
  theme_ridges() +
  theme(
    plot.title = element_text(
      hjust = 0.5, size = 14, face = "bold", margin = margin(b = 25)
    ),
    axis.title.x = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(t = 10)
    ),
    axis.title.y = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(r = 10)
    )
  )

```

## The Code

```{r}
#| eval: false
ggplot(exam, 
       aes(x = ENGLISH, 
           y = CLASS,
           fill = stat(x))) +
  geom_density_ridges_gradient(
    scale = 3,
    rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Temp. [F]",
                       option = "C") +
  scale_x_continuous(
    name = "English Scores",
    expand = c(0, 0)) +
  scale_y_discrete(name = "Class", expand = expansion(add = c(0.2, 2.6))) +
  ggtitle("Distribution of English Score by Class") +
  theme_ridges() +
  theme(
    plot.title = element_text(
      hjust = 0.5, size = 14, face = "bold", margin = margin(b = 25)
    ),
    axis.title.x = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(t = 10)
    ),
    axis.title.y = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(r = 10)
    )
  )
```
:::

::: block-title
**How it can be improved?**\
Darker colors mean stronger, and lighter colors mean weaker, while this intepretation can be seen from different view. Additionally it uses a 'Temp. \[F\]' - see legend–, which is confusing because temperature probably has nothing to do with this. Also, there's a legend that isn't needed. To make it clearer, we should get rid of the legend.\
\
Instead let's try using different color, and change the color direction
:::

#### Improved Version

```{r}
#| code-fold: true

ggplot(exam,
       aes(x = ENGLISH,
           y = CLASS,
           fill = stat(x))) +
 geom_density_ridges_gradient(
   scale = 3,
   rel_min_height = 0.01) +
 scale_fill_viridis_c( direction = -1) +
 scale_x_continuous(
   name = "English Scores",
   expand = c(0, 0)) +
 scale_y_discrete(name = "Class", expand = expansion(add = c(0.2, 2.6))) +
 ggtitle("Distribution of English Score by Class") +
 theme_ridges() +
 theme(
   plot.title = element_text(
     hjust = 0.5, size = 14, face = "bold", margin = margin(b = 25)
   ),
   axis.title.x = element_text(
     size = 12, face = "bold", hjust = 0.5, margin = margin(t = 10)
   ),
   axis.title.y = element_text(
     size = 12, face = "bold", hjust = 0.5, margin = margin(r = 10)
   ),
   legend.position = "none"
 )

```

### 3.3 Mapping the probabilities directly onto colour

Beside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called [`stat_density_ridges()`](https://wilkelab.org/ggridges/reference/stat_density_ridges.html) that replaces [`stat_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) of ggplot2.

Figure below is plotted by mapping the probabilities calculated by using `stat(ecdf)` which represent the empirical cumulative density function for the distribution of English score.

::: panel-tabset
### The Plot

```{r}
#| echo: false
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = 0.5 - abs(0.5-stat(ecdf)))) +
  stat_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE) +
  scale_fill_viridis_c(name = "Tail probability", direction = -1) +
  scale_x_continuous(
    name = "English Score"
  ) +
  scale_y_discrete(
    name = "Class"
  ) +
  ggtitle("Distribution of English Score by Class") +
  theme_ridges() +
  theme(
    plot.title = element_text(
      hjust = 0.5, size = 14, face = "bold", margin = margin(b = 25)
    ),
    axis.title.x = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(t = 10)
    ),
    axis.title.y = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(r = 10)
    )
  )
```

### The Code

```{r}
#| eval: false

ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = 0.5 - abs(0.5-stat(ecdf)))) +
  stat_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE) +
  scale_fill_viridis_c(name = "Tail probability", direction = -1) +
  scale_x_continuous(
    name = "English Score"
  ) +
  scale_y_discrete(
    name = "Class"
  ) +
  ggtitle("Distribution of English Score by Class") +
  theme_ridges() +
  theme(
    plot.title = element_text(
      hjust = 0.5, size = 14, face = "bold", margin = margin(b = 25)
    ),
    axis.title.x = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(t = 10)
    ),
    axis.title.y = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(r = 10)
    )
  )
```
:::

::: callout-important
**It is important include the argument `calc_ecdf = TRUE` in `stat_density_ridges()`.**

Without `calc_ecdf = TRUE`, `stat(ecdf)` won't work and your color gradient (based on tail probability) will not show correctly.
:::

### 3.4 Ridgeline plots with quantile lines

By using [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html), we can colour the ridgeline plot by quantile, via the calculated `stat(quantile)` aesthetic as shown in the figure below.

::: panel-tabset
### The Plot

```{r}
#| echo: false
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  scale_x_continuous(
    name = "English Score"
  ) +
  scale_y_discrete(
    name = "Class"
  ) +
  ggtitle("Distribution of English Score by Class") +
  theme_ridges() +
  theme(
    plot.title = element_text(
      hjust = 0.5, size = 14, face = "bold", margin = margin(b = 25)
    ),
    axis.title.x = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(t = 10)
    ),
    axis.title.y = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(r = 10)
    )
  )
  
```

### The Code

```{r}
#| eval: false

ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  scale_x_continuous(
    name = "English Score"
  ) +
  scale_y_discrete(
    name = "Class"
  ) +
  ggtitle("Distribution of English Score by Class") +
  theme_ridges() +
  theme(
    plot.title = element_text(
      hjust = 0.5, size = 14, face = "bold", margin = margin(b = 25)
    ),
    axis.title.x = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(t = 10)
    ),
    axis.title.y = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(r = 10)
    )
  )
```
:::

Instead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.

::: panel-tabset
### The Plot

```{r}
#| echo: false
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = c(0.025, 0.975)
    ) +
  scale_fill_manual(
    name = "Probability",
    values = c("#FF0000A0", "#A0A0A0A0", "#0000FFA0"),
    labels = c("Lower tail (0–2.5%)", "Middle 95%", "Upper tail (97.5–100%)")
  ) +
  ggtitle("Distribution of English Score by Class") +
  theme_ridges() +
  theme(
    plot.title = element_text(
      hjust = 0.5, size = 14, face = "bold", margin = margin(b = 25)
    ),
    axis.title.x = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(t = 10)
    ),
    axis.title.y = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(r = 10)
    )
  )
```

### The Code

```{r}
#| eval: false
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = c(0.025, 0.975)
    ) +
  scale_fill_manual(
    name = "Probability",
    values = c("#FF0000A0", "#A0A0A0A0", "#0000FFA0"),
    labels = c("Lower tail (0–2.5%)", "Middle 95%", "Upper tail (97.5–100%)")
  ) +
  ggtitle("Distribution of English Score by Class") +
  theme_ridges() +
  theme(
    plot.title = element_text(
      hjust = 0.5, size = 14, face = "bold", margin = margin(b = 25)
    ),
    axis.title.x = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(t = 10)
    ),
    axis.title.y = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(r = 10)
    )
  )
```
:::

## 4 Visualising Distribution with Raincloud Plot

Raincloud Plot is a data visualisation techniques that produces a *half-density to a distribution plot*. It gets the name because the density plot is in the shape of a "raincloud". The raincloud (half-density) plot *enhances the traditional box-plot* by highlighting multiple modalities (an indicator that groups may exist). The ***boxplot does not show where densities are clustered, but the raincloud plot does!***

In this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by **ggdist** and ggplot2 packages.

### 4.1 Plotting a Half Eye graph

First, we will plot a Half-Eye graph by using [`stat_halfeye()`](https://mjskay.github.io/ggdist/reference/stat_halfeye.html) of **ggdist** package.

This produces a Half Eye visualization, which is contains a half-density and a slab-interval.

:::: panel-tabset
## The Plot

```{r}
#| echo: false

ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA,
               fill = "#4E79A7") +
  ggtitle("Distribution of English Score by Race")+
  scale_y_continuous(
    name = "English Score") +
  labs(
    x = "Race",                   
    title = "English Scores by Race"
  ) +
  theme(
    # Bold and adjust axis titles
    axis.title.x = element_text(face = "bold", size = 12, margin = margin(t = 10)),
    axis.title.y = element_text(face = "bold", size = 12, margin = margin(r = 10)),
    # Capitalize x-axis labels (race categories)
    axis.text.x = element_text(face = "bold", size = 10),
    # Bold title
    plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
    # Add margin around plot
    plot.margin = margin(1, 1, 1, 1, "cm")
  )
  
```

## The Code

```{r}
#| eval: false
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA,
               fill = "#4E79A7") +
  ggtitle("Distribution of English Score by Race")+
  scale_y_continuous(
    name = "English Score") +
  labs(
    x = "Race",                   
    title = "English Scores by Race"
  ) +
  theme(
    # Bold and adjust axis titles
    axis.title.x = element_text(face = "bold", size = 12, margin = margin(t = 10)),
    axis.title.y = element_text(face = "bold", size = 12, margin = margin(r = 10)),
    # Capitalize x-axis labels (race categories)
    axis.text.x = element_text(face = "bold", size = 10),
    # Bold title
    plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
    # Add margin around plot
    plot.margin = margin(1, 1, 1, 1, "cm")
  )
```

::: callout-tip
## Things to learn from the code chunk above

-   **We remove the slab interval** by setting `.width = 0` and `point_colour = NA`.\
    This hides the interval ribbon and the dot, showing only the density shape.

-   **We add the color** for the density shape using the `fill =` aesthetic inside `aes()`.
:::
::::

### 4.2 Adding the boxplot with `geom_boxplot()`

Next, we will add the second geometry layer using [`geom_boxplot()`]() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.

::: panel-tabset
## The Plot

```{r}
#| echo: false 

ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA,
               fill = "#4E79A7") +
  geom_boxplot(width = .20,
               outlier.shape = NA)+
  scale_y_continuous(
    name = "English Score") +
  labs(
    x = "Race",                   
    title = "English Scores by Race"
  ) +
  theme(
    # Bold and adjust axis titles
    axis.title.x = element_text(face = "bold", size = 12, margin = margin(t = 10)),
    axis.title.y = element_text(face = "bold", size = 12, margin = margin(r = 10)),
    # Capitalize x-axis labels (race categories)
    axis.text.x = element_text(face = "bold", size = 10),
    # Bold title
    plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
    # Add margin around plot
    plot.margin = margin(1, 1, 1, 1, "cm")
  )
```

## The Code

```{r}
#| eval: false

ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA,
               fill = "#4E79A7") +
  geom_boxplot(width = .20,
               outlier.shape = NA)+
  scale_y_continuous(
    name = "English Score") +
  labs(
    x = "Race",                   
    title = "English Scores by Race"
  ) +
  theme(
    # Bold and adjust axis titles
    axis.title.x = element_text(face = "bold", size = 12, margin = margin(t = 10)),
    axis.title.y = element_text(face = "bold", size = 12, margin = margin(r = 10)),
    # Capitalize x-axis labels (race categories)
    axis.text.x = element_text(face = "bold", size = 10),
    # Bold title
    plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
    # Add margin around plot
    plot.margin = margin(1, 1, 1, 1, "cm")
  )
```
:::

### 4.3 Adding the Dot Plots with `stat_dots()`

Next, we will add the third geometry layer using [`stat_dots()`](https://mjskay.github.io/ggdist/reference/stat_dots.html) of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = "left" to indicate we want it on the left-hand side.

::: panel-tabset
## The Plot

```{r}
#| echo: false
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.4,
               justification = -0.2,
               .width = 0,
               point_colour = NA,
               width = 0.8,
               fill = "#4E79A7") +
  geom_boxplot(width = .10,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)+
  scale_y_continuous(
    name = "English Score") +
  labs(
    x = "Race",                   
    title = "English Scores by Race"
  ) +
  theme(
    # Bold and adjust axis titles
    axis.title.x = element_text(face = "bold", size = 12, margin = margin(t = 10)),
    axis.title.y = element_text(face = "bold", size = 12, margin = margin(r = 10)),
    # Capitalize x-axis labels (race categories)
    axis.text.x = element_text(face = "bold", size = 10),
    # Bold title
    plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
    # Add margin around plot
    plot.margin = margin(1, 1, 1, 1, "cm")
  )
```

## The Code

```{r}
#| eval: false
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.4,
               justification = -0.2,
               .width = 0,
               point_colour = NA,
               width = 0.8,
               fill = "#4E79A7") +
  geom_boxplot(width = .10,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)+
  scale_y_continuous(
    name = "English Score") +
  labs(
    x = "Race",                   
    title = "English Scores by Race"
  ) +
  theme(
    # Bold and adjust axis titles
    axis.title.x = element_text(face = "bold", size = 12, margin = margin(t = 10)),
    axis.title.y = element_text(face = "bold", size = 12, margin = margin(r = 10)),
    # Capitalize x-axis labels (race categories)
    axis.text.x = element_text(face = "bold", size = 10),
    # Bold title
    plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
    # Add margin around plot
    plot.margin = margin(1, 1, 1, 1, "cm")
  )
```
:::

### 4.4 Finishing touch

Lastly, [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html) of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, `theme_economist()` of ggthemes package is used to give the raincloud chart a professional publishing standard look.

::: panel-tabset
## The Plot

```{r}
#| echo: false
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA,
               width = 0.8,
               fill = "#4E79A7") +
  geom_boxplot(width = .10,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = NA,
            dotsize = 1.5) +
  coord_flip() +
  theme_economist() +
  scale_y_continuous(
    name = "English Score") +
  labs(
    x = "Race",                   
    title = "English Scores by Race"
  ) +
  theme(
    axis.title.x = element_text(face = "bold", size = 12, margin = margin(t = 15)),
    axis.title.y = element_text(face = "bold", size = 12, margin = margin(r = 15)),
    plot.title = element_text(face = "bold", size = 14, hjust = 0.2),
    plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm")
  )


```

## The Code

```{r}
#| eval: false
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA,
               width = 0.8,
               fill = "#4E79A7") +
  geom_boxplot(width = .10,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = NA,
            dotsize = 1.5) +
  coord_flip() +
  theme_economist() +
  scale_y_continuous(
    name = "English Score") +
  labs(
    x = "Race",                   
    title = "English Scores by Race"
  ) +
  theme(
    axis.title.x = element_text(face = "bold", size = 12, margin = margin(t = 15)),
    axis.title.y = element_text(face = "bold", size = 12, margin = margin(r = 15)),
    plot.title = element_text(face = "bold", size = 14, hjust = 0.2),
    plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm")
  )

```
:::

## 5 Ridgeline with Histogram

```{r}
#| code-fold: true

ggplot(exam,
       aes(x = ENGLISH,
           y = CLASS,
           fill = CLASS)) +
  geom_density_ridges(
    stat = "binline",       
    bins = 20,             
    alpha = 0.7,
    color = "darkgrey",
    size = 0.5,
    show.legend = FALSE,
    scale = 0.9,          
    panel_scaling = FALSE  
  ) +
  scale_x_continuous(
    name = "English Scores",
    expand = c(0, 0)       
  ) +
  scale_y_discrete(
    name = "Class",
    expand = expansion(add = c(0.2, 0.8)) 
  ) +
  ggtitle("Distribution of English Score by Class") +
  theme_ridges() +
  theme(
    plot.title = element_text(
      hjust = 0.5, size = 14, face = "bold", margin = margin(b = 25)
    ),
    axis.title.x = element_text(
      size = 12, face = "bold", hjust = 0.45, margin = margin(t = 10)
    ),
    axis.title.y = element_text(
      size = 12, face = "bold", hjust = 0.5, margin = margin(r = 8)
    )
  )
```

## **6 Reference**

-   Allen M, Poggiali D, Whitaker K et al. [“Raincloud plots: a multi-platform tool for robust data. visualization”](https://wellcomeopenresearch.org/articles/4-63) \[version 2; peer review: 2 approved\]. Welcome Open Res 2021, pp. 4:63.

-   Claus O. Wilke [Fundamentals of Data Visualization](https://clauswilke.com/dataviz/) especially Chapter [6](https://clauswilke.com/dataviz/visualizing-amounts.html), [7](https://clauswilke.com/dataviz/histograms-density-plots.html), [8](https://clauswilke.com/dataviz/ecdf-qq.html), [9](https://clauswilke.com/dataviz/boxplots-violins.html) and [10](https://clauswilke.com/dataviz/visualizing-proportions.html).

-   Data-to-Viz. *Ridgeline Chart*. Retrieved from <https://www.data-to-viz.com/graph/ridgeline.html>

<!-- -->

-   [Introducing Ridgeline Plots (formerly Joyplots)](https://blog.revolutionanalytics.com/2017/07/joyplots.html)

-   Kay, M. J. (n.d.). *ggdist: Dots and intervals*. Retrieved from <https://mjskay.github.io/ggdist/articles/dotsinterval.html>
