{
  "hash": "fbd164a028e3b5e3057993593462934f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home_Exercise 1 (Part 2)\"\nsubtitle: \"Understanding Demographic Structures and Distribution of Singapore in 2024.\"\ndescription: \"Peer Review\"\nauthor: patriciatrisno\ndate: \"May 10, 2025\"\ndate-modified: \"last-modified\"\nformat: docx\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n\nIn this peer review, I will be analyzing [*Teo Wee Siang Roy's*](https://iss608-first-session.netlify.app/take-home_ex/take-home_ex01/take-home_ex01) visualization of the Singapore (2024) population pyramid.\n\nEffective data visualization plays a crucial role in conveying complex demographic information, and this review will specifically focus on how Roy's plot balances informative content with aesthetic appeal to ensure accuracy, transparency, and rapid insight communication.\n\n## **1 Preparation**\n\nFirst of all, let’s take a look at this plot that we will be reviewing.\n\n![](images/Review%20Graph.png){width=\"770\"}\n\nWe will also recreate a similar plot based on the idea and code provided by the student. However, since the cleaned dataset used in the original work is not available, we will instead work with a pre-cleaned version of the data.\n\n#### Package Installation\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npacman::p_load(tidyverse, readxl, haven, ggrepel, \nggthemes, patchwork, ggridges, ggdist, scales, plotly, \ngganimate, gifski, gapminder)\n```\n:::\n\n\n\n\n#### Importing Data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npop_data <- read_csv(\"~/Documents/SMU/April Term 2/Visual Analytics/patriciatrisno/ISSS608-VAA/Take-home_Exercise/Take-home_Ex01/data/respopagesex2024/respopagesex2024.csv\")\n```\n:::\n\n\n\n\n::: callout-note\n### Note:\n\nWe are using pre-cleaned data based on the description shared by the student. Please note that some specific cleaning steps—such as the removal of rows with zero population—may not be interpreted in exactly the same way.\n\nIn our version, we interpret areas with constant zero or near-zero population as likely being non-residential zones. These could include industrial areas, commercial districts, nature reserves, or national parks. Therefore, we have removed subzones that show consistently zero or almost entirely zero population counts.\n\nHowever, subzones with very low but non-zero populations (approximately 0–40 residents) are kept in the dataset. We believe these areas may still offer valuable insights due to their potentially unique characteristics.\n:::\n\nWhile subzones like [**Dunearn**,**Moulmein**,**Kent Ridge**,**Pasir Panjang 1 & 2**,**Institution Hill**,**Robertson Quay**,**Sentosa**,**Tyresall**, and **Springleaf**]{style=\"color:#8a2be2; font-weight:bold\"} may represent pockets of unique demographics within Singapore, making them important to retain for further analysis.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npop_data <- pop_data[,!names(pop_data) %in% c(\"Time\")]\n\nsubzones_to_exclude <- c(\"Liu Fang\", \"Samulun\", \"Shipyard\", \"Tukang\", \"City terminals\", \"Singapore General Hospital\", \"Central Water Catchment\", \"Changi Airport\", \"Changi Bay\", \"Pandan\", \"Toh Tuck\", \"Anson\", \"Bayfront Subzone\", \"City Hall\", \"Clifford Pier\", \"Marina Centre\", \"Maxwell\", \"Nicoll\", \"Phillip\", \"Raffles Place\", \"Kallang Way\", \"Defu Industrial Park\", \"Lorong Halus\", \"International Business Park\", \"Jurong Port\", \"Jurong River\", \"lakeside (Business)\", \"Penjuru Crescent\", \"Chin Bee\", \"Kian Teck\", \"Safti\", \"Kallang Bahru\", \"Lim Chu Kang\", \"Mandai East\", \"Mandai West\", \"Bras Basah\", \"Marina East\", \"Marina South\", \"East Coast\", \"Marina East (Mp)\", \"Istana Negara\", \"North-Eastern Islands\", \"Somerset\", \"China Square\", \"People's Park\", \"Pasir Ris Wafer fab Park\", \"Airport Road\", \"Paya Lebar East\", \"Paya Lebar North\", \"Paya Lebar West\", \"Plab\", \"Benoi Sector\", \"Gul Basin\", \"Gul Circle\", \"Joo Koon\", \"Pioneer Sector\", \"Coney Island\", \"Punggol Canal\", \"National University Of S'pore\", \"Port\", \"Queensway\", \"Singapore Polytechnic\", \"Paterson\", \"Kampong Glam\", \"Mackenzie\", \"Rochor Canal\", \"Selegie\", \"Pulau Punggol Barat\", \"Pulau Punggol Timor\", \"Seletar\", \"Seletar Aerospace Park\", \"Lorong Halus North\", \"Sengkang West\", \"Senoko North\", \"The Wharves\", \"Serangoon North Ind Estate\", \"Pulau Seletar\", \"Simpang North\", \"Simpang South\", \"Tanjong Irau\", \"Boat Quay\", \"Clarke Quay\", \"Southern Group\", \"Straits View\", \"Gali Batu\", \"Kranji\", \"Pang Sua\", \"Reservoir View\", \"Brickland\", \"Brickland\", \"Forest Hill\", \"Garden\", \"Park\", \"Tengah Industrial Estate\", \"Tengeh\", \"Tuas Bay\", \"Tuas North\", \"Tuas Promenade\", \"Tuas View\", \"Tuas View Extension\", \"Jurong Island And Bukom\", \"Semakau\", \"Sudong\", \"Bahar\", \"Cleantech\", \"Greenwood Park\", \"Midview\", \"Senoko West\", \"Woodlands Regional Center\", \"Nee Soon\", \"Yio Chu Kang\", \"Yio Chu Kang North\", \"City Terminals\", \"Changi Point\", \"Bugis\", \"Tanjong Pagar\", \"Bukit Merah\", \"Cecil\", \"Jurong Gateway\", \"Lakeside (Leisure)\", \"Kampong Bugis\",  \"Mandai Estate\", \"Dhoby Ghaut\", \"Goodwood Park\", \"Newton Circus\", \"Monk's Hill\", \"Orange Grove\", \"Malcolm\", \"Mount Pleasant\", \"Boulevard\", \"Tanglin\",\"Loyang East\", \"Loyang West\", \"One North\", \"One Tree Hill\", \"Oxley\", \"Bencoolen\", \"Farrer Park\", \"Little India\", \"Mount Emily\", \"Sungei Road\", \"Victoria\", \"Sembawang Straits\", \"Turf Club\", \"Xilin\", \"Ridout\", \"Murai\", \"Yishun\")\n\npop_data <- subset(pop_data, !(SZ %in% subzones_to_exclude))\ncolnames(pop_data) <- c('PA','Subzone','Age','Sex','Population')\n\npop_data$Age[pop_data$Age == \"90_and_Over\"] <- \"90\"\n\npop_data<- pop_data %>%\n  mutate(Age = as.numeric(Age))\n\n\npop_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 34,580 × 5\n   PA         Subzone                  Age Sex     Population\n   <chr>      <chr>                  <dbl> <chr>        <dbl>\n 1 Ang Mo Kio Ang Mo Kio Town Centre     0 Males           10\n 2 Ang Mo Kio Ang Mo Kio Town Centre     0 Females         10\n 3 Ang Mo Kio Ang Mo Kio Town Centre     1 Males           10\n 4 Ang Mo Kio Ang Mo Kio Town Centre     1 Females         10\n 5 Ang Mo Kio Ang Mo Kio Town Centre     2 Males           10\n 6 Ang Mo Kio Ang Mo Kio Town Centre     2 Females         10\n 7 Ang Mo Kio Ang Mo Kio Town Centre     3 Males           10\n 8 Ang Mo Kio Ang Mo Kio Town Centre     3 Females         10\n 9 Ang Mo Kio Ang Mo Kio Town Centre     4 Males           30\n10 Ang Mo Kio Ang Mo Kio Town Centre     4 Females         10\n# ℹ 34,570 more rows\n```\n\n\n:::\n:::\n\n\n\n\n#### Pyramid Plot\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npyramid_data <- pop_data %>%\n  filter(Sex %in% c(\"Males\", \"Females\")) %>%\n  mutate(Population = ifelse(Sex == \"Males\", -Population, Population))\n\nggplot(pyramid_data, aes(x = Age, y = Population, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.9) +\n  coord_flip() + scale_x_continuous(limits = c(0, 100)) +\n  scale_y_continuous(labels = function(x) comma(abs(x))) +\n  scale_fill_manual(\n    values = c(\"Males\" = \"#00bfc4\", \"Females\" = \"#f8766d\"),\n    breaks = c(\"Males\", \"Females\"), \n    labels = c(\"Males\", \"Females\")\n  ) +\n  labs(\n    title = \"Population Pyramid of Singapore (2024)\",\n    subtitle = \"Male population is shown on the left, female on the right\",\n    x = \"Age\",\n    y = \"Population (count)\",\n    fill = \"Gender Distribution\"\n  ) +\n  theme_minimal(base_family = \"Helvetica\") +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(size = 12, hjust = 0.5,color = \"grey40\"),\n    axis.text = element_text(size = 10),\n    axis.title = element_text(size = 11),\n    legend.position = \"top\",\n    legend.title = element_text(size = 10, face = \"bold\"),\n    legend.text = element_text(size = 9),\n    plot.margin = margin(10, 10, 10, 10)\n  ) \n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01-Part02_files/figure-docx/unnamed-chunk-4-1.png)\n:::\n:::\n\n\n\n\n::: callout-note\n### Note:\n\nThe plot generated here may not look exactly the same as the original—especially in terms of population distribution. This difference is likely due to the different rules we used for eliminating certain subzones or cities during data cleaning.\n\nHowever, our main focus is not on matching the exact numbers or areas used, but rather on understanding how to use a population pyramid plot to effectively communicate insights about population structure. The goal is to show how visual design can help present demographic patterns clearly and meaningfully.\n:::\n\n## **2 Good Design Principles**\n\n### 1.1 Clear and Visually Appealing Use of Font\n\n![](images/title.png){width=\"498\"}\n\nThe choice of **font for the title and descriptions** is both **clean and easy to read**. Using bold for the title helps grab attention and gives readers a quick idea of what the plot is about. This is important for guiding the audience right from the start.\n\nThe subtitle is styled with a smaller font size and a lighter color, which clearly signals that it provides additional context. This visual hierarchy makes it **easier to process the information at a glance**.\n\n> **Design principles highlighted:** [**Transparency, fast communication of key insights.**]{style=\"color:#8a2be2; font-weight:bold\"}\n\n### 1.2 Effective Use of Color to Represent Gender\n\n![](images/color.png)\n\n**The use of different colors**—teal for males and salmon pink for females—**clearly separates the two groups**. This color distinction, supported by a clear legend at the top, helps viewers easily understand the data.\n\nThe colors are also aesthetically pleasing and not overwhelming. They’re appropriate for representing gender categories, with salmon often used for females and teal for males.\n\n> **Design principles highlighted:** [**Clarity, accuracy, and effective communication.**]{style=\"color:#8a2be2; font-weight:bold\"}\n\n### 1.3 Logical Structure and Symmetrical Layout\n\n![](images/axis%20range.png)\n\nThe vertical axis shows **age groups in ascending order,** starting from age 0 at the bottom to 100 at the top. This **logical ordering** aligns with how we typically interpret age data, making the plot **intuitive to read**.\n\nThe population bars are **arranged symmetrically around a central axis**, which allows for easy comparison between male and female population sizes within each age group. This mirrored layout is not only visually balanced but also **enhances the plot’s accuracy and readability**.\n\n> **Design principles highlighted:** [**Accuracy, visual balance, and meaningful comparison.**]{style=\"color:#8a2be2; font-weight:bold\"}\n\n## **3 Three Areas for Further Improvement**\n\nIn this part we will briefly take a look, on three parts that can be improved.\n\n### 3.1 Title and Legend / Main Description\n\n![](images/fix%20title.png)\n\n-   The **title** \"Population Pyramid of Singapore (2024)\" **can be more specific.**\n\n-   The subtitle \"Male population is shown on the left, female on the right\" is helpful, but since the colors already show gender differences clearly, the **legend might not be needed**. Also, the plot doesn’t make full use of the empty space to explain or give more useful information.\n\n### 3.2 Axis Scaling and Information\n\n![](images/age range 2.png){width=\"636\"}\n\n-   making the **chart visually crowded** (narrow and densely packed bars) and **difficult to** interpret or to **grasp meaningful differences in population across ages at a glance**.\n\n::: callout-note\n### Note:\n\nBoth approaches—displaying the full age distribution and grouping ages into bins—serve different analytical purposes.\n\nShowing each individual age can be helpful when precise, granular insights are needed, such as identifying specific age spikes or anomalies.\n\nOn the other hand, grouping ages into broader intervals helps simplify the data, making it easier to observe general demographic patterns and trends across age ranges. This binning approach enhances readability and supports more effective comparisons between larger population segments.\n:::\n\n-   The original chart **displays age values up to 100**, which does not align with the source data that categorizes all individuals aged 90 and above into a single group. This can **lead to misinterpretation.**\n\n-   Also, the **horizontal axis** shows l**arge numbers like 50,000** or 100,000 **without explanation**, which might be **confusing** for some audiences. While the chart gives a lot of information, it’s not easy to quickly understand the exact number of people in each group. Without clear numbers or percentages, it’s hard for viewers to get a good sense of how many people are in each age or gender category.\n\n### 3.3 Content, Text, and Visual Layout\n\n![](images/axes%20fix.png)\n\n-   The **axis labels are placed very close to the plot**, which makes the chart feel a bit crowded and **harder to read**.\n\n## 4 **Makeover and Details (with reference to the comment)**\n\nBuilding upon the identified areas for improvement, this section outlines specific adjustments to enhance the population pyramid's effectiveness.\n\nIn this section We will begin by outlining several ways to improve the visualization, followed by the revised code.\n\n### 3.1 Title and Legend / Main Description\n\n-   Use a more detailed title like **\"Age and Gender Distribution of Singapore's Population (2024)\"**.\n-   Remove the legend and directly label **\"Male\"** and **\"Female\"** in the white space above each side of the pyramid.\n-   Use the subtitle or description area to mention the **total population size** or include **data source information**, which adds context and makes the chart more informative.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n#Calculate the total pop\ntotal_pop <- pop_data %>% \n  filter(Sex %in% c(\"Males\", \"Females\")) %>% \n  summarise(total = sum(Population)) %>% \n  pull(total) %>% \n  format(big.mark = \",\", scientific = FALSE)\n  \n#Pyramid\npyramid_data <- pop_data %>%\n  filter(Sex %in% c(\"Males\", \"Females\")) %>%\n  mutate(Population = ifelse(Sex == \"Males\", -Population, Population))\n\nggplot(pyramid_data, aes(x = Age, y = Population, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.9) +\n  coord_flip() + scale_x_continuous(limits = c(0, 100)) +\n  scale_y_continuous(labels = function(x) comma(abs(x))) +\n  scale_fill_manual(\n    values = c(\"Males\" = \"#00bfc4\", \"Females\" = \"#f8766d\"),\n    breaks = c(\"Males\", \"Females\"), \n    labels = c(\"Males\", \"Females\"),\n    guide = \"none\"\n  ) +\n# Add direct labels for Male and Female\n  annotate(\"text\", x = 95, y = -max(abs(pyramid_data$Population)) * 0.9, \n           label = \"Male\", color = \"#00bfc4\", size = 5, fontface = \"bold\",\n           hjust = 1) +\n  annotate(\"text\", x = 95, y = max(abs(pyramid_data$Population)) * 0.9, \n           label = \"Female\", color = \"#f8766d\", size = 5, fontface = \"bold\",\n           hjust = 0) +\n  labs(\n    title = \"Age and Gender Distribution of Singapore's Population (2024)\", #change the title\n    subtitle = paste(\"Total population:\", total_pop, \"| Source: Singapore Department of Statistics\"),\n    x = \"Age\",\n    y = \"Population (count)\",\n    fill = \"Gender Distribution\"\n  ) +\n  theme_minimal(base_family = \"Helvetica\") +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(size = 12, hjust = 0.5,color = \"grey40\"),\n    axis.text = element_text(size = 10),\n    axis.title = element_text(size = 11),\n    legend.position = \"top\",\n    legend.title = element_text(size = 10, face = \"bold\"),\n    legend.text = element_text(size = 9),\n    plot.margin = margin(10, 10, 10, 10)\n  )\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01-Part02_files/figure-docx/unnamed-chunk-5-1.png)\n:::\n:::\n\n\n\n\n### 3.2 Axis Scaling and Information\n\n-   **Group ages** into intervals like 5-year or 10-year ranges (e.g., 0–4, 5–9), which would make the chart easier to read and interpret.\n\n-   For the “90 and above” group, clearly label it as such to better representation, and interpretation.\n\n-   Add a **secondary information** showing **percentage** of total population, which helps viewers compare groups more fairly, especially if the population size is uneven across age groups.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Calculate the total pop\ntotal_pop <- pop_data %>%\n  filter(Sex %in% c(\"Males\", \"Females\")) %>%\n  summarise(total = sum(Population)) %>%\n  pull(total)\n\ntotal_pop_formatted <- format(total_pop, big.mark = \",\", scientific = FALSE)\n\n# Define the desired order of age groups\nage_group_order <- c(\n  \"0-4\", \"5-9\", \"10-14\", \"15-19\", \"20-24\", \"25-29\", \"30-34\", \"35-39\",\n  \"40-44\", \"45-49\", \"50-54\", \"55-59\", \"60-64\", \"65-69\", \"70-74\",\n  \"75-79\", \"80-84\", \"85-89\", \"90+\"\n)\n\n# Group ages into 5-year intervals\npyramid_data_grouped <- pop_data %>%\n  filter(Sex %in% c(\"Males\", \"Females\")) %>%\n  mutate(AgeGroup = case_when(\n    Age >= 90 ~ \"90+\",\n    TRUE ~ paste0(floor(Age / 5) * 5, \"-\", floor(Age / 5) * 5 + 4)\n  )) %>%\n  group_by(AgeGroup, Sex) %>%\n  summarise(Population = sum(Population), .groups = 'drop') %>%\n  mutate(Population_neg = ifelse(Sex == \"Males\", -Population, Population),\n         Percentage = (Population / total_pop) * 100) %>%\n  # Set the order of AgeGroup factor\n  mutate(AgeGroup = factor(AgeGroup, levels = age_group_order))\n\n# Pyramid plot with grouped ages and percentage labels\nggplot(pyramid_data_grouped, aes(x = AgeGroup, y = Population_neg, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.9) +\n  coord_flip() +\n  scale_y_continuous(labels = function(x) comma(abs(x))) +\n  scale_fill_manual(\n    values = c(\"Males\" = \"#00bfc4\", \"Females\" = \"#f8766d\"),\n    breaks = c(\"Males\", \"Females\"),\n    labels = c(\"Males\", \"Females\"),\n    guide = \"none\"\n  ) +\n  # Add direct labels for Male and Female\n  annotate(\"text\", x = nlevels(pyramid_data_grouped$AgeGroup) * 0.95, y = -max(abs(pyramid_data_grouped$Population_neg)) * 0.9,\n           label = \"   Male\", color = \"#00bfc4\", size = 3, fontface = \"bold\",\n           hjust = 1) +\n  annotate(\"text\", x = nlevels(pyramid_data_grouped$AgeGroup) * 0.95, y = max(abs(pyramid_data_grouped$Population_neg)) * 0.9,\n           label = \"Female  \", color = \"#f8766d\", size = 3, fontface = \"bold\",\n           hjust = 0) +\n  # Add percentage labels\n  geom_text(aes(label = sprintf(\"%.1f%%\", Percentage)),\n            hjust = ifelse(pyramid_data_grouped$Sex == \"Males\", 1.1, -0.1),\n            size = 2.5) +\n  labs(\n    title = \"Age and Gender Distribution of Singapore's Population (2024)\", #change the title\n    subtitle = paste(\"Total population:\", total_pop_formatted, \"| Source: Singapore Department of Statistics\"),\n    x = \"Age Group\",\n    y = \"Population (count)\",\n    fill = \"Gender Distribution\"\n  ) +\n  theme_minimal(base_family = \"Helvetica\") +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(size = 12, hjust = 0.5,color = \"grey40\"),\n    axis.text.y = element_text(size = 8), # Adjust y-axis text size\n    axis.text.x = element_text(size = 10),\n    axis.title = element_text(size = 11),\n    legend.position = \"top\",\n    legend.title = element_text(size = 10, face = \"bold\"),\n    legend.text = element_text(size = 9),\n    plot.margin = margin(10, 10, 10, 10)\n  )\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01-Part02_files/figure-docx/unnamed-chunk-6-1.png)\n:::\n:::\n\n\n\n\n### 3.3 Content, Text, and Visual Layout\n\n-   Create more **space between the axis labels and the bars**, so everything looks cleaner and easier to read.\n\n-   **Adjust the font size** of 'Female' and 'Male' annotation. **Adjust the figure size** to better fit the page. Bold the axis title for greater emphasis to the labels.\n\n-   **Remove extra space after 90.**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Calculate the total pop\ntotal_pop <- pop_data %>%\n  filter(Sex %in% c(\"Males\", \"Females\")) %>%\n  summarise(total = sum(Population)) %>%\n  pull(total)\n\ntotal_pop_formatted <- format(total_pop, big.mark = \",\", scientific = FALSE)\n\n# Define the desired order of age groups\nage_group_order <- c(\n  \"0-4\", \"5-9\", \"10-14\", \"15-19\", \"20-24\", \"25-29\", \"30-34\", \"35-39\",\n  \"40-44\", \"45-49\", \"50-54\", \"55-59\", \"60-64\", \"65-69\", \"70-74\",\n  \"75-79\", \"80-84\", \"85-89\", \"90+\"\n)\n\n# Group ages into 5-year intervals\npyramid_data_grouped <- pop_data %>%\n  filter(Sex %in% c(\"Males\", \"Females\")) %>%\n  mutate(AgeGroup = case_when(\n    Age >= 90 ~ \"90+\",\n    TRUE ~ paste0(floor(Age / 5) * 5, \"-\", floor(Age / 5) * 5 + 4)\n  )) %>%\n  group_by(AgeGroup, Sex) %>%\n  summarise(Population = sum(Population), .groups = 'drop') %>%\n  mutate(Population_neg = ifelse(Sex == \"Males\", -Population, Population),\n         Percentage = (Population / total_pop) * 100) %>%\n  # Set the order of AgeGroup factor\n  mutate(AgeGroup = factor(AgeGroup, levels = age_group_order))\n\n# Pyramid plot with grouped ages and percentage labels\nggplot(pyramid_data_grouped, aes(x = AgeGroup, y = Population_neg, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.9) +\n  coord_flip() +\n  scale_y_continuous(labels = function(x) comma(abs(x))) +\n  scale_fill_manual(\n    values = c(\"Males\" = \"#00bfc4\", \"Females\" = \"#f8766d\"),\n    breaks = c(\"Males\", \"Females\"),\n    labels = c(\"Males\", \"Females\"),\n    guide = \"none\"\n  ) +\n  # Add direct labels for Male and Female\n  annotate(\"text\", x = nlevels(pyramid_data_grouped$AgeGroup) * 0.95, y = -max(abs(pyramid_data_grouped$Population_neg)) * 0.9,\n           label = \"  Male\", color = \"#00bfc4\", size = 6, fontface = \"bold\",\n           hjust = 1) +\n  annotate(\"text\", x = nlevels(pyramid_data_grouped$AgeGroup) * 0.95, y = max(abs(pyramid_data_grouped$Population_neg)) * 0.9,\n           label = \"Female  \", color = \"#f8766d\", size = 6, fontface = \"bold\",\n           hjust = 0) +\n  # Add percentage labels\n  geom_text(aes(label = sprintf(\"%.1f%%\", Percentage)),\n            hjust = ifelse(pyramid_data_grouped$Sex == \"Males\", 1.1, -0.1),\n            size = 2.5) +\n  labs(\n    title = \"Age and Gender Distribution of Singapore's Population (2024)\", #change the title\n    subtitle = paste(\"Total population:\", total_pop_formatted, \"| Source: Singapore Department of Statistics\"),\n    x = \"Age Group\",\n    y = \"Population (count)\",\n    fill = \"Gender Distribution\"\n  ) +\n  theme_minimal(base_family = \"Helvetica\") +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5, vjust=3),\n    plot.subtitle = element_text(size = 12, hjust = 0.5,vjust=3,color = \"grey40\"),\n    axis.text.y = element_text(size = 12,  margin = margin(r = 10, l = 0)), # Add right margin\n    axis.text.x = element_text(size = 12,  margin = margin(t = 5, b = 0)), # Add top margin\n    axis.title.x = element_text(margin = margin(t = 10, b = 0), face = \"bold\"), # Add top margin to x-axis title\n    axis.title.y = element_text(margin = margin(r = 10, l = 0), face = \"bold\"), # Add right margin to y-axis title\n    legend.position = \"top\",\n    legend.title = element_text(size = 10, face = \"bold\"),\n    legend.text = element_text(size = 9),\n    plot.margin = margin(10, 10, 10, 10)\n  )\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01-Part02_files/figure-docx/unnamed-chunk-7-1.png)\n:::\n:::\n\n\n\n\n::: callout-note\n**Through each part, now we can see how this plot is improved.**\n:::\n",
    "supporting": [
      "Take-Home_Exercise01-Part02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}