{
  "hash": "c364a2fcab161de565e92293257bd0b8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on_Exercise 6\"\nsubtitle: \"Visualising and Analysing Time-oriented Data\"\nauthor: patriciatrisno\ndate: \"May 22, 2025\"\ndate-modified: \"last-modified\"\nformat: html\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n\n## 1 Learning Outcome\n\nBy the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\n-   plotting a **calender heatmap** by using ggplot2 functions,\n\n-   plotting a **cycle plot** by using ggplot2 function,\n\n-   plotting a **slopegraph**\n\n-   plotting a **horizon chart**\n\n## 2 Getting Started\n\n### 2.1 Package Installation\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse)\n```\n:::\n\n\n\n\n### 2.2 The Data\n\nFor the purpose of this hands-on exercise, *eventlog.csv* file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n### Importing the data\n\nFirst, you will use the code chunk below to import *eventlog.csv* file into R environment and called the data frame as *attacks*.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks <- read_csv(\"data/eventlog.csv\")\n```\n:::\n\n\n\n\n## 3 Plotting Calendar Heatmap\n\nIn this section, we will learn how to plot a calender heatmap programmatically by using ggplot2 package.\n\n![](images/HO6 img1.png)\n\n::: callout-note\n**Our goals for this chapter:**\n\n-   plot a calender heatmap by using ggplot2 functions and extension,\n-   to write function using R programming,\n-   to derive specific date and time related field by using base R and lubridate packages\n-   to perform data preparation task by using tidyr and dplyr packages.\n:::\n\n## 4 Data Preparation\n\n::: callout-note\nBefore starting the data prepration would be wise for us to understand our data first before further analysis performed\n\n-   There are three columns, namely *timestamp*, *source_country* and *tz*.\n\n    -   *timestamp* field stores date-time values in POSIXct format.\n\n    -   *source_country* field stores the source of the attack. It is in *ISO 3166-1 alpha-2* country code.\n\n    -   *tz* field stores time zone of the source IP address.\n\n-   For timezone, the title tz might be confusing for certain type of analysis, so if it is needed, it is suggested to rename the title\n:::\n\nBelow we will use kable() to review the structure of the imported data frame\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|timestamp           |source_country |tz              |\n|:-------------------|:--------------|:---------------|\n|2015-03-12 15:59:16 |CN             |Asia/Shanghai   |\n|2015-03-12 16:00:48 |FR             |Europe/Paris    |\n|2015-03-12 16:02:26 |CN             |Asia/Shanghai   |\n|2015-03-12 16:02:38 |US             |America/Chicago |\n|2015-03-12 16:03:22 |CN             |Asia/Shanghai   |\n|2015-03-12 16:03:45 |CN             |Asia/Shanghai   |\n\n\n:::\n:::\n\n\n\n\n### Step 1: Deriving *weekday* and *hour of day* fields\n\nBefore we can plot the calender heatmap, two new fields namely *wkday* and *hour* need to be derived. In this step, we will write a function to perform the task.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_time <- ymd_hms(ts, \n                       tz = tz[1],\n                       quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_time),\n                   hour = hour(real_time))\n  return(dt)\n}\n```\n:::\n\n\n\n\n**Understand the Code**\n\nThis function accepts three parameters: `ts` (timestamp), `sc` (source country), and `tz` (timezone). It utilizes the `ymd_hms()`function from the `lubridate` package to parse the input timestamp string (`ts`) into a date-time object. Crucially, it assigns the timezone specified by the first element of the `tz` parameter (e.g., `tz[1]`) to this parsed date. Following this, the function leverages the `data.table` package, known for its optimized speed and memory efficiency, especially with large datasets, to construct a new data table named `dt`. This `dt` object will contain three columns: `source_country`, `wkday`(representing the day of the week), and `hour` (representing the hour of the day).\n\n::: callout-note\n-   [`ymd_hms()`](https://lubridate.tidyverse.org/reference/ymd_hms.html) and [`hour()`](https://lubridate.tidyverse.org/reference/hour.html) are from [**lubridate**](https://lubridate.tidyverse.org/) package, and\n-   [`weekdays()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/weekdays) is a **base** R function.\n:::\n\n### Step 2: Deriving the attacks tibble data frame\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n```\n:::\n\n\n\n\n::: callout-note\nBeside extracting the necessary data into *attacks* data frame, `mutate()` of **dplyr** package is used to convert *wkday* and *hour* fields into **factor** so they'll be ordered when plotting\n:::\n\nTable below shows the tidy tibble table after processing.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|tz           |source_country |wkday    |hour |\n|:------------|:--------------|:--------|:----|\n|Africa/Cairo |BG             |Saturday |20   |\n|Africa/Cairo |TW             |Sunday   |6    |\n|Africa/Cairo |TW             |Sunday   |8    |\n|Africa/Cairo |CN             |Sunday   |11   |\n|Africa/Cairo |US             |Sunday   |15   |\n|Africa/Cairo |CA             |Monday   |11   |\n\n\n:::\n:::\n\n\n\n\n## 5 Building the Calendar Heatmaps\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Exercise-6_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n::: callout-tip\n# Things to learn from the code chunk\n\n-   a tibble data table called *grouped* is derived by aggregating the attack by *wkday* and *hour* fields.\n-   a new field called *n* is derived by using `group_by()` and `count()` functions.\n-   `na.omit()` is used to exclude missing value.\n-   `geom_tile()` is used to plot tiles (grids) at each x and y position. `color` and `size` arguments are used to specify the border color and line size of the tiles.\n-   [`theme_tufte()`](https://jrnold.github.io/ggthemes/reference/theme_tufte.html) of [**ggthemes**](https://jrnold.github.io/ggthemes/reference/index.html) package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\n-   `coord_equal()` is used to ensure the plot will have an aspect ratio of 1:1.\n-   `scale_fill_gradient()` function is used to creates a two colour gradient (low-high).\n:::\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n## 6 Building Multiple Calendar Heatmaps\n\n**Challenge:** Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n![](images/HO6 img2.png)\n\n::: callout-note\nPay attention that this the x label of the 2 graph KR and NL is not properly present. This will require further arrangement for visual representation.\n:::\n\n## 7 Plotting Multiple Calendar Heatmaps\n\nStep 1: Deriving attack by country object\n\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\n-   count the number of attacks by country,\n-   calculate the percent of attackes by country, and\n-   save the results in a tibble data frame.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n```\n:::\n\n\n\n\nStep 2: Preparing the tidy data frame\n\nIn this step, you are required to extract the attack records of the top 4 countries from *attacks*data frame and save the data in a new tibble data frame (i.e. *top4_attacks*).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n```\n:::\n\n\n\n\n## 8 Plotting Multiple Calendar Heatmaps\n\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Exercise-6_files/figure-html/unnamed-chunk-10-1.png){width=1152}\n:::\n:::\n\n\n\n\n## 9 Plotting Cycle Plot\n\nIn this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n![](images/HO6 img3.png)\n\n### 9.1 Step 1: Data Import\n\nFor the purpose of this hands-on exercise, *arrivals_by_air.xlsx* will be used.\n\nThe code chunk below imports *arrivals_by_air.xlsx* by using `read_excel()` of **readxl** package and save it as a tibble data frame called *air*.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n```\n:::\n\n\n\n\n### 9.2 Step 2: Deriving month and year fields\n\nNext, two new fields called *month* and *year* are derived from *Month-Year* field.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \n\nair$year <- year(ymd(air$`Month-Year`))\n```\n:::\n\n\n\n\n### 9.3 Step 3: Extracting the target country\n\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n```\n:::\n\n\n\n\n### 9.4 Step 4: Computing year average arrivals by month\n\nThe code chunk below uses `group_by()` and `summarise()` of **dplyr** to compute year average arrivals by month.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n```\n:::\n\n\n\n\n### 9.5 Step 5: Plotting the cycle plot\n\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVietnam\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 120 × 3\n   Vietnam month  year\n     <dbl> <ord> <int>\n 1   15781 Jan    2010\n 2   16335 Feb    2010\n 3   18061 Mar    2010\n 4   22154 Apr    2010\n 5   21461 May    2010\n 6   28146 Jun    2010\n 7   34020 Jul    2010\n 8   25351 Aug    2010\n 9   20105 Sep    2010\n10   20591 Oct    2010\n# ℹ 110 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  scale_x_continuous(breaks = seq(2010, 2019, by = 1)) + \n  theme (axis.text.x = element_text(angle = 45, hjust = 1, size = 5))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Exercise-6_files/figure-html/unnamed-chunk-16-1.png){width=1440}\n:::\n:::\n\n\n\n\n## 10 Plotting Slopegraph\n\nIn this section we will learn how to plot a [slopegraph](https://www.storytellingwithdata.com/blog/2020/7/27/what-is-a-slopegraph) by using R.\n\nBefore getting start, make sure that **CGPfunctions** has been installed and loaded onto R environment. Then, refer to [Using newggslopegraph](https://cran.r-project.org/web/packages/CGPfunctions/vignettes/Using-newggslopegraph.html) to learn more about the function. Lastly, read more about `newggslopegraph()` and its arguments by referring to this [link](https://www.rdocumentation.org/packages/CGPfunctions/versions/0.6.3/topics/newggslopegraph).\n\n### 10.1 Step 1: Data Import\n\nImport the rice data set into R environment by using the code chunk below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice <- read_csv(\"data/rice.csv\")\n```\n:::\n\n\n\n\n### 10.2 Step 2: Plotting the slopegraph\n\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice %>% \n  mutate(Year = factor(Year)) %>%\n  filter(Year %in% c(1961, 1980)) %>%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Patricia Trisno\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Exercise-6_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\n::: callout-tip\n# Thing to learn from the code chunk above\n\nFor effective data visualisation design, `factor()` is used convert the value type of *Year* field from numeric to factor.\n:::\n",
    "supporting": [
      "Hands-on_Exercise-6_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}